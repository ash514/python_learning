Part-1
===========================
Q1. Why do we call Python as a general purpose and high-level programming language?
Because they are not written in machine-readable language, Python programs need to be processed before machines can run them. Python is an interpreted language. 
This means that every time a program is run, its interpreter runs through the code and translates it into machine-readable byte code.

Q2. Why is Python called a dynamically typed language?
 Python is a dynamically typed language. It doesn’t know about the type of the variable until the code is run. So declaration is of no use. What it does is, 
 It stores that value at some memory location and then binds that variable name to that memory container.  And makes the contents of the container accessible
 through that variable name. So the data type does not matter. As it will get to know the type of the value at run-time.

Q3. List some pros and cons of Python programming language?
PROS:
*It's Simple.
*It's Free.
*It's Easy to Use.
*It's Highly Compatible.
*It is Object-Oriented.
*It has Lots of Libraries.
*It has Built-in Data Structures.

CONS:
Poor Memory Efficiency. To make it simple for the developer, Python needs a lot of memory space; this can be a tad problematic if you want to develop apps where you need to
*optimize memory.
*Slow Speed. ...
*Database Access. ...
*Weak in Mobile Computing. ...
*Runtime Errors.

Q4. In what all domains can we use Python?
1. Data Science
2. Automation
3. Application Development 
4. AI & Machine Learning 
5. Networking and Internet Development :
 Python provides two levels of access to network services. At a low level, you can access the basic socket support in the underlying operating system, which allows you 
 to implement clients and servers for both connection-oriented and connection-less protocols. Python also has libraries that provide higher-level access to specific 
 application-level network protocols, such as FTP, HTTP, and so on.Modules like urllib , socket, and the infamous requests (HTTP for humans) make it an ideal choice for
 networking. Also, beautifulsoup, selenium are very effective for stuff like automation, scrapping, etc.
 
Q5. What are variable and how can we declare them?
Variable is a name given to a specific memory location.
example:
a=5
name='ashu'


Q6. How can we take an input from the user in Python?
for taking input from the user in python we can use input() function.
example:
name=input("Enter the value for name=")

Q7. What is the default datatype of the value that has been taken as an input using input() function?
The input() function by default returns the value as string data type​.

Q8. What is type casting?
In type casting, the compiler automatically changes one data type to another one depending on what we want the program to do. For instance,
in case we assign a float variable (floating point) with an integer (int) value, the compiler will ultimately convert this int value into the float value.

Q9. Can we take more than one input from the user using single input() function? If yes, how? If no, why?

Q10. What are keywords?
Keyword	Description
and	--A logical operator
as --To create an alias
assert	--For debugging
break	--To break out of a loop
class	--To define a class
continue	--To continue to the next iteration of a loop
def	--To define a function
del	--To delete an object
elif	--Used in conditional statements, same as else if
else	--Used in conditional statements
except	--Used with exceptions, what to do when an exception occurs
False	--Boolean value, result of comparison operations
finally	--Used with exceptions, a block of code that will be executed no matter if there is an exception or not
for	--To create a for loop
from	--To import specific parts of a module
global	--To declare a global variable
if	--To make a conditional statement
import	--To import a module
in	--To check if a value is present in a list, tuple, etc.
is	--To test if two variables are equal
lambda	--To create an anonymous function
None	--Represents a null value
nonlocal	--To declare a non-local variable
not	--A logical operator
or	--A logical operator
pass	--A null statement, a statement that will do nothing
raise	--To raise an exception
return	--To exit a function and return a value
True	--Boolean value, result of comparison operations
try	--To make a try...except statement
while	--To create a while loop
with	--Used to simplify exception handling
yield	--To end a function, returns a generator

Q11. Can we use keywords as a variable? Support your answer with reason.
Python Keywords
----------------
Keywords are predefined, reserved words used in Python programming that have special meanings to the compiler.
We cannot use a keyword as a variable name, function name, or any other identifier. They are used to define the SYNTAX and structure of the Python language.
All the keywords except True, False and None are in lowercase and they must be written as they are. The list of all the keywords is given below.

Q12. What is indentation? What's the use of indentaion in Python?
Python Indentation
-------------------------
Indentation refers to the spaces at the beginning of a code line.
Where in other programming languages the indentation in code is for readability only, the indentation in Python is very important.
Python uses indentation to indicate a block of code.
Example
if 5 > 2:
  print("Five is greater than two!")
  
The number of spaces is up to you as a programmer, but it has to be at least one.

Q13. How can we throw some output in Python?

Q14. What are operators in Python?
+	Addition: adds two operands	x + y
–	Subtraction: subtracts two operands	x – y
*	Multiplication: multiplies two operands	x * y
/	Division (float): divides the first operand by the second	x / y
//	Division (floor): divides the first operand by the second	x // y
%	Modulus: returns the remainder when the first operand is divided by the second	x % y
**	Power: Returns first raised to power second	x ** y

Q15. What is difference between / and // operators?
/->used for float division
//->used for integer division

Q16. Write a code that gives following as an output.
```
iNeuroniNeuroniNeuroniNeuron
```
a="iNeuron"*4
print(a)

Q17. Write a code to take a number as an input from the user and check if the number is odd or even.
number=int(input("Enter the Value Number"))
if number%2==0:
	print("Even")
else:    
    print("Odd")	
	
Q18. What are boolean operator?
Booleans represent one of two values: True or False.
Example:
print(10 > 9)
print(10 == 9)
print(10 < 9)


Q19. What will the output of the following?
1 or 0 -->True
0 and 0 -->false
True and False and True-->False
1 or 0 or 0 -->True


Q20. What are conditional statements in Python?
if
elif
if..else
Nested if statement

Q21. What is use of 'if', 'elif' and 'else' keywords?
1.if Statement
=============================
If the simple code of block is to be performed if the condition holds true then if statement is used.
Here the condition mentioned holds true then the code of block runs otherwise not.
SYNTAX:
if condition:           
   # Statements to execute if
   # condition is true

2.if..else Statement
==========================
In conditional if Statement the additional block of code is merged as else statement which is performed when if condition is false. 
SYNTAX:  
if (condition):
    # Executes this block if
    # condition is true
else:
    # Executes this block if
    # condition is false

3.Nested if Statement
====================================
if statement can also be checked inside other if statement. This conditional statement is called a nested if statement.
This means that inner if condition will be checked only if outer if condition is true and by this, we can see multiple conditions to be satisfied.

SYNTAX:  
if (condition1):
   # Executes when condition1 is true
   if (condition2): 
      # Executes when condition2 is true
   # if Block is end here
# if Block is end here

4.if-elif Statement
==============================
The if-elif statement is shortcut of if..else chain. While using if-elif statement at the end else block is added which is performed if none of the above if-elif statement is true.
SYNTAX:-  

if (condition):
    statement
elif (condition):
    statement
.
.
else:
    statement
	
	
Q22. Write a code to take the age of person as an input and if age >= 18 display "I can vote". If age is < 18 display "I can't vote".
age=int(input("Enter the Value of age"))   
if age>=18:
    print("I can vote")
else:
    print("I can't vote")   
	
Q23. Write a code that displays the sum of all the even numbers from the given list.
```
numbers = [12, 75, 150, 180, 145, 525, 50]
```
List = [12, 75, 150, 180, 145, 525, 50]
print("\nList of numbers: ")
print(List)
sum=0
for i in List:
    if i%2==0:
        sum+=i
print(sum)   


Q24. Write a code to take 3 numbers as an input from the user and display the greatest no as output.
num1=int(input("Enter the Value of num1:"))
num2=int(input("Enter the Value of num2:"))
num3=int(input("Enter the Value of num3:"))
if num1>num2:
    print("num1 is greater=",num1)
elif num2>num3:
    print("num2 is greater=",num2)
else:
    print("num3 is greater=",num3)     
	
	
Q25. Write a program to display only those numbers from a list that satisfy the following conditions

- The number must be divisible by five

- If the number is greater than 150, then skip it and move to the next number

- If the number is greater than 500, then stop the loop
```
numbers = [12, 75, 150, 180, 145, 525, 50]
```
List = [12, 75, 150, 180, 145, 525, 50]
print("\nList of numbers: ")
print(List)
for i in List:
    if i>500:
        break
    elif i>150:
        continue
    elif i%5==0:
        print(i)

The number must be divisible by five

If the number is greater than 150, then skip it and move to the next number

If the number is greater than 500, then stop the loop

numbers = [12, 75, 150, 180, 145, 525, 50]
Q26. What is a string? How can we declare string in Python?
Ans:A string is a series of characters.
Declaration ex:
	str1='ashu'
	st2="singh'

Q27. How can we access the string using its index?
Ans:
string1="Ashu Singh"
print(string1[5]) #S
print(string1[2]) #h

Q28. Write a code to get the desired output of the following
string = "Big Data iNeuron"
desired_output = "iNeuron"

Ans:
string = "Big Data iNeuron"
print(string[9:]) //iNeuron


Q29. Write a code to get the desired output of the following
string = "Big Data iNeuron"
desired_output = "norueNi"
Answer:
string1="Big Data iNeuron"
print(string1[:-8:-1])

Q30. Resverse the string given in the above question.
Answer:
string1="Big Data iNeuron"
reverse_string=string1[::-1]
print(reverse_string)

Q31. How can you delete entire string at once?

Q32. What is escape sequence?
Answer:
Escape sequences allow you to include special characters in strings. To do this, simply add a backslash (\) before the character you want to escape.
example:
string = "We are the so-called \"Vikings\" from the north."
print(string) 

Q33. How can you print the below string?
'iNeuron's Big Data Course'
Ans:
string1="'iNeuron's Big Data Course'"
print(string1)

Q34. What is a list in Python?
Lists are used to store multiple items in a single variable.
Lists can store heterogeneous elements.
List is a collection which is ordered and changeable. Allows duplicate members.

Q35. How can you create a list in Python?
example:
list1=[1,'ashu','abc',123]

Q36. How can we access the elements in a list?
we can access the list elements with the help of indexes.
example:
thislist = ["apple", "banana", "cherry"]
print(thislist[1])

Q37. Write a code to access the word "iNeuron" from the given list.

lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]
Q38. Take a list as an input from the user and find the length of the list.

Q39. Add the word "Big" in the 3rd index of the given list.	

lst = ["Welcome", "to", "Data", "course"]
Answer.
lst = ["Welcome", "to", "Data", "course"]
lst.insert(3,'Big')
print(lst)

Q40. What is a tuple? How is it different from list?
Answer:
The primary difference between tuples and lists is that tuples are immutable as opposed to lists which are mutable.
Therefore, it is possible to change a list but not a tuple. The contents of a tuple cannot change once they have been created in Python due to the immutability of tuples.

Difference
----------------------
1	Lists are mutable and Tuples are immutable
2	The implication of iterations is Time-consuming and	The implication of iterations is comparatively Faster
3	The list is better for performing operations, such as insertion and deletion. and	Tuple data type is appropriate for accessing the elements
4	Lists consume more memory	and Tuple consumes less memory as compared to the list
5	Lists have several built-in methods	and Tuple does not have many built-in methods.
6	The unexpected changes and errors are more likely to occur	and In tuple, it is hard to take place.

Q41. How can you create a tuple in Python?
A tuple in Python can be created by enclosing all the comma-separated elements inside the parenthesis ().
example:
t1 = (1, 2, 3, 4)
t2 = ("Make", "Use", "Of")
t3 = (1.2, 5.9, 5.4, 9.3)

An empty tuple can be created by using empty opening and closing parentheses.
emptyTuple = ()

NOTE:
Creating a Tuple With a Single Element
To create a tuple with only 1 element, you need to add a comma after the element to get it recognised as a tuple by Python.


Q42. Create a tuple and try to add your name in the tuple. Are you able to do it? Support your answer with reason.
tup1 = ('M', 'A', 'K', 'E', 'U', 'S', 'E', 'O', 'F')
# Following error is thrown
tup1[0] = 'ASHU SINGH'

TypeError: 'tuple' object does not support item assignment
Because tuple are immutable.

Q43. Can two tuple be appended. If yes, write a code for it. If not, why?
Answer:
In Python, since tuple is immutable, you cannot update it, i.e., you cannot add, change, or remove items (elements) in tuple.

Q44. Take a tuple as an input and print the count of elements in it.

Q45. What are sets in Python?

Q46. How can you create a set?
Answer:
# create a set of integer type
student_id = {112, 114, 116, 118, 115}
print('Student ID:', student_id)

# create a set of string type
vowel_letters = {'a', 'e', 'i', 'o', 'u'}
print('Vowel Letters:', vowel_letters)

Q47. Create a set and add "iNeuron" in your set.
Answer:
numbers = {21, 34, 54, 12}
print('Initial Set:',numbers)
# using add() method
numbers.add('iNeuron')
print('Updated Set:', numbers) 

Q48. Try to add multiple values using add() function.
Answer:
numbers = {21, 34, 54, 12}
print('Initial Set:',numbers)
# using add() method
numbers.add('iNeuron','ashu')
print('Updated Set:', numbers) 

ERROR:Initial Set: {34, 12, 21, 54}
Traceback (most recent call last):
File "<string>", line 6, in <module>
TypeError: set.add() takes exactly one argument (2 given)
> 

Q49. How is update() different from add()?
Answer:
UPDATE:
The update() method is used to update the set with items other collection types (lists, tuples, sets, etc). For example,

companies = {'Lacoste', 'Ralph Lauren'}
tech_companies = ['apple', 'google', 'apple']
companies.update(tech_companies)
print(companies)
# Output: {'google', 'apple', 'Lacoste', 'Ralph Lauren'}

ADD:
In Python, we use the add() method to add an item to a set. For example,
numbers = {21, 34, 54, 12}
print('Initial Set:',numbers)
# using add() method
numbers.add(32)
print('Updated Set:', numbers) 

Q50. What is clear() in sets?
Answer:
The clear() method removes all elements in a set.
Syntax
set.clear()

Q51. What is frozen set?
Answer:
Frozen set is just an immutable version of a Python set object. While elements of a set can be modified at any time, elements of the frozen set remain the same after creation.
Due to this, frozen sets can be used as keys in Dictionary or as elements of another set.

Q52. How is frozen set different from set?
Answer:
Frozenset is similar to set in Python, except that frozensets are immutable, which implies that once generated, elements from the frozenset cannot be added or removed.
This function accepts any iterable object as input and transforms it into an immutable object.

Q53. What is union() in sets? Explain via code.
Answer:
Python Set Operations
==========================
Python Set provides different built-in methods to perform mathematical set operations like union, intersection, subtraction, and symmetric difference.
Union of Two Sets
--------------------
The union of two sets A and B include all the elements of set A and B.
We use the | operator or the union() method to perform the set union operation. For example:
# first set
A = {1, 3, 5}

# second set
B = {0, 2, 4}

# perform union operation using |
print('Union using |:', A | B)

# perform union operation using union()
print('Union using union():', A.union(B)) 

OUTPUT:
Union using |: {0, 1, 2, 3, 4, 5}
Union using union(): {0, 1, 2, 3, 4, 5}
Note: A|B and union() is equivalent to A ⋃ B set operation.

Q54. What is intersection() in sets? Explain via code.
Set Intersection
The intersection of two sets A and B include the common elements between set A and B.
In Python, we use the & operator or the intersection() method to perform the set intersection operation. For example,

# first set
A = {1, 3, 5}

# second set
B = {1, 2, 3}

# perform intersection operation using &
print('Intersection using &:', A & B)

# perform intersection operation using intersection()
print('Intersection using intersection():', A.intersection(B)) 

OUTPUT:
Intersection using &: {1, 3}
Intersection using intersection(): {1, 3}
Note: A&B and intersection() is equivalent to A ⋂ B set operation.


Q55. What is dictionary in Python?
Answer:
Dictionary
----------
Dictionaries are used to store data values in key:value pairs.
A dictionary is a collection which is ordered*, changeable and do not allow duplicates.
Example:
thisdict =	{
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict)

output:{'brand': 'Ford', 'model': 'Mustang', 'year': 1964}

Q56. How is dictionary different from all other data structures.
Answer:
The dictionary Data Structure in Python is an unordered collection of items. While other Data Structures use only one value as the element,
the dictionary is a slightly more compound data structure. It makes use of two elements i.e. a pair of elements, namely, a key and a value.

Q57. How can we declare a dictionary in Python?
A Dictionary in python is declared by enclosing a comma-separated list of key-value pairs using curly braces({}). Python Dictionary is classified into two elements: 
Keys and Values.
Keys will be a single element
Values can be a list or list within a list, numbers, etc.

Q58. What will the output of the following?
var = {}
print(type(var))
Ans:dict

Q59. How can we add an element in a dictionary?
Answer:
CountryCodeDict = {"India": 91, "UK" : 44 , "USA" : 1, "Spain" : 34}
print(CountryCodeDict)

CountryCodeDict.update( {'Germany' : 49} )

print(CountryCodeDict)

# Adding multiple key value pairs
CountryCodeDict.update( [('Austria', 43),('Russia',7)] )

output:
{'India': 91, 'UK': 44, 'USA': 1, 'Spain': 34}
{'India': 91, 'UK': 44, 'USA': 1, 'Spain': 34, 'Germany': 49}


Q60. Create a dictionary and access all the values in that dictionary.
Answer:
d = {1:-0.3246, 2:-0.9185, 3:-3985,4:"ashu singh"}
print(d.values())


Q61. Create a nested dictionary and access all the element in the inner dictionary.
Answer:
SYNTAX;
nested_dict = { 'dictA': {'key_1': 'value_1'},
                'dictB': {'key_2': 'value_2'}}
			
Example:
people = {1: {'name': 'John', 'age': '27', 'sex': 'Male'},
          2: {'name': 'Marie', 'age': '22', 'sex': 'Female'}}

print(people[1]['name'])
print(people[1]['age'])
print(people[2]['sex'])			
				

Q62. What is the use of get() function?
Answer.
get() is used to find the value of a particular key.

Q63. What is the use of items() function?
Answer:
item() function is used for iteration the dictionary.

Q64. What is the use of pop() function?

Q65. What is the use of popitems() function?

Q66. What is the use of keys() function?
Answer:
keys() display all the key from a dictionary.

Q67. What is the use of values() function?
Answer:The values() method returns a view object. The view object contains the values of the dictionary, as a list.
SYNTAX
dictionary.values()

car = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}

x = car.values()

car["year"] = 2018

print(x)

Q68. What are loops in Python?
1	while loop
=====================
Repeats a statement or group of statements while a given condition is TRUE. It tests the condition before executing the loop body.
SYNTAX:
while expression:
   statement(s)
   
   Example:
   count = 0
while (count < 9):
   print 'The count is:', count
   count = count + 1

print "Good bye!"

2	for loop
=======================
Executes a sequence of statements multiple times and abbreviates the code that manages the loop variable.
SYNTAX:
---------
for iterating_var in sequence:
   statements(s)
   
   Example:
   for letter in 'Python':     # First Example
   print 'Current Letter :', letter

fruits = ['banana', 'apple',  'mango']
for fruit in fruits:        # Second Example
   print 'Current fruit :', fruit

print "Good bye!"
When the above code is executed, it produces the following result −

Current Letter : P
Current Letter : y
Current Letter : t
Current Letter : h
Current Letter : o
Current Letter : n
Current fruit : banana
Current fruit : apple
Current fruit : mango
Good bye!

3	nested loops
=========================
You can use one or more loop inside any another while, for or do..while loop.
SYNTAX:
-------
for iterating_var in sequence:
   for iterating_var in sequence:
      statements(s)
   statements(s)
   
   
SYNTAX:
-----------
while expression:
   while expression:
      statement(s)
   statement(s)
A final note on loop nesting is that you can put any type of loop inside of any other type of loop. For example a for loop can be inside a while loop or vice versa.

Example
The following program uses a nested for loop to find the prime numbers from 2 to 100 −

i = 2
while(i < 100):
   j = 2
   while(j <= (i/j)):
      if not(i%j): break
      j = j + 1
   if (j > i/j) : print i, " is prime"
   i = i + 1

print "Good bye!"
When the above code is executed, it produces following result −

2 is prime
3 is prime
5 is prime
7 is prime
11 is prime
13 is prime
17 is prime
19 is prime
23 is prime
29 is prime
31 is prime
37 is prime
41 is prime
43 is prime
47 is prime
53 is prime
59 is prime
61 is prime
67 is prime
71 is prime
73 is prime
79 is prime
83 is prime
89 is prime
97 is prime
Good bye!

Q69. How many type of loop are there in Python?

Q70. What is the difference between for and while loops?
Answer:
For loop is used when the number of iterations is already known. While loop is used when the number of iterations is already Unknown

Q71. What is the use of continue statement?
Answer:
We can use continue statement to skip current iteration and continue next iteration.
example:
for i in range(10):
    if i%2==0:
        continue
    print(i)
	
	output:
	1
	3
	5
	7
	9
	

Q72. What is the use of break statement?
Answer:
1) break:
We can use break statement inside loops to break loop execution based on some
condition.
example:
for i in range(10):
    if i==7:
        print("processing is enough..plz break")
        break
    print(i)

Q73. What is the use of pass statement?
The pass statement is used as a placeholder for future code.
When the pass statement is executed, nothing happens, but you avoid getting an error when empty code is not allowed.
Empty code is not allowed in loops, function definitions, class definitions, or in if statements.

Example:
for x in [0, 1, 2]:
  pass

# having an empty for loop like this, would raise an error without the pass statement

Example:
def myfunction():
  pass

# having an empty function definition like this, would raise an error without the pass statement

Q74. What is the use of range() function?
Answer:
The range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and stops before a specified number.

SYNTAX:
-----------
range(start, stop, step)
example:
x = range(6)
for n in x:
  print(n)
  
  output: 
0
1
2
3
4
5

Q75. How can you loop over a dictionary?

Coding problems
Q76. Write a Python program to find the factorial of a given number.
Answer:
def factorial(n):

    if n == 0 or n == 1:
        return 1

    result = 1
    for num in range(1, n+1):
        result = result * num
    
    return result
num=int(input("Enter the number to find the factorial"))
print(factorial(num))

Q77. Write a Python program to calculate the simple interest. Formula to calculate simple interest is SI = (PRT)/100?
Answer:
def simple_interest(p,r,t):
    si=(p*r*t)/100
    return si


p=float(input("Enter the number to find the principle"))
r=float(input("Enter the number to find the rate"))
t=float(input("Enter the number to find the time"))

print(simple_interest(p,r,t))

Q78. Write a Python program to calculate the compound interest. Formula of compound interest is A = P(1+ R/100)^t.
def compound_interest(principal, rate, time):
 
    # Calculates compound interest
    Amount = principal * (pow((1 + rate / 100), time))
    CI = Amount - principal
    print("Compound interest is", CI)
 
 
# Driver Code
compound_interest(1000, 10, 2)

Q79. Write a Python program to check if a number is prime or not.
Answer:
num=int(input("Enter the Number:"))
if num>1:
    for i in range (2,int(num/2)+1):
        if num%i==0:
            print("Num is not prime")
            break
        else:
            print(num,"num is prime")
else:
    print("Prime Number")

Q80. Write a Python program to check Armstrong Number.
Answer:
n=int(input("Enter num to check whether is armstrong or not")) 
s = n 
b = len(str(n))
sum1 = 0
while n != 0:
    r = n % 10
    sum1 = sum1+(r**b)
    n = n//10
if s == sum1:
    print("The given number", s, "is armstrong number")
else:
    print("The given number", s, "is not armstrong number")
	
	

Q81. Write a Python program to find the n-th Fibonacci Number.
Answer:
def Fibonacci(n):
    if n<= 0:
        print("Incorrect input")
    # First Fibonacci number is 0
    elif n == 1:
        return 0
    # Second Fibonacci number is 1
    elif n == 2:
        return 1
    else:
        return Fibonacci(n-1)+Fibonacci(n-2)
 
n=int(input("Enter the Value of number for find the fibonacci:")) 
print(Fibonacci(n))


Q82. Write a Python program to interchange the first and last element in a list.
Answer:
def swapList(newList):
     
    newList[0], newList[-1] = newList[-1], newList[0]
    return newList
     
newList = [12, 35, 9, 56, 24]
print(swapList(newList))

Q83. Write a Python program to swap two elements in a list.
Answer:


Q84. Write a Python program to find N largest element from a list.
Answer:
list1 = [10, 454, 4, 45, 9]
list1.sort()
print("Largest element is:", list1[-1])

Q85. Write a Python program to find cumulative sum of a list.
list=[10,20,30,40,50]
cum_sum=[]
j=0
for i in range(0,len(list)):
    j+=list[i]
    cum_sum.append(j)
     
print(cum_sum)

Q86. Write a Python program to check if a string is palindrome or not.
Answer:
def isPalindrome(string):
    return string == string[::-1]

string = input("Enter the string to check whether it's palindrome")
ans = isPalindrome(string)
 
if ans:
    print("Yes")
else:
    print("No")

Q87. Write a Python program to remove i'th element from a string.
Answer:
myStr =  input('Enter the string : ')
i = int(input('Enter the index of character to be removed : '))

result_str = myStr.replace(myStr[i], "", 1)
 
print ("Entered string : " + myStr)
print ("String formed by removing i'th character : " + result_str)

Q88. Write a Python program to check if a substring is present in a given string.
Answer:
str1=input("Enter the string=")
str2=input("Enter the substring=")

if str2 in str1:
    print("Given substring is Present")
else:
    print("Given substring is not Present")

Q89. Write a Python program to find words which are greater than given length k.

Q90. Write a Python program to extract unquire dictionary values.
test_dict= {'gfg' : [5, 6, 7, 8],
            'is' : [10, 11, 7, 5],
            'best' : [6, 12, 10, 8],
            'for' : [1, 2, 5]}
            
print("The original dictionary is : " + str(test_dict))
 
# Extract Unique values dictionary values
x=[]
for i in test_dict.keys():
    x.extend(test_dict[i])
x=list(set(x))
x.sort()
# printing result
print("The unique values list is : " + str(x))  

Q91. Write a Python program to merge two dictionary.
Ans:
1st
========================================
def Merge_dict(dict1, dict2):
    return(dict2.update(dict1))
dict1 = {'a': 10, 'b': 8}
dict2 = {'d': 6, 'c': 4}
 
print(Merge_dict(dict1, dict2))
print(dict2)

Q92. Write a Python program to convert a list of tuples into dictionary.

Input : [('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]
Output : {'Sachin': 10, 'MSD': 7, 'Kohli': 18, 'Rohit': 45}
Q93. Write a Python program to create a list of tuples from given list having number and its cube in each tuple.

Input: list = [9, 5, 6]
Output: [(9, 729), (5, 125), (6, 216)]
Q94. Write a Python program to get all combinations of 2 tuples.

Input : test_tuple1 = (7, 2), test_tuple2 = (7, 8)
Output : [(7, 7), (7, 8), (2, 7), (2, 8), (7, 7), (7, 2), (8, 7), (8, 2)]
Q95. Write a Python program to sort a list of tuples by second item.

Input : [('for', 24), ('Geeks', 8), ('Geeks', 30)] 
Output : [('Geeks', 8), ('for', 24), ('Geeks', 30)]
Q96. Write a python program to print below pattern.

* 
* * 
* * * 
* * * * 
* * * * * 

Answer:
rows = int(input("Enter the rows which you want to print"))
for i in range(1, rows + 1):
    for j in range(1, i + 1):
        print('*', end=' ')
    print('')
	
	
Q97. Write a python program to print below pattern.

    *
   **
  ***
 ****
*****
Answer:
def pattern(n):
     k = 2 * n - 2
     for i in range(0, n):
          for j in range(0, k):
               print(end=" ")
          k = k - 2
          for j in range(0, i + 1):
              print("* ", end="")
          print("\r")
  
pattern(5)

Q98. Write a python program to print below pattern.

    * 
   * * 
  * * * 
 * * * * 
* * * * * 
Answer:
n = int(input("Enter number of rows:"))
for i in range(1,n+1):
    print(" " * (n-i),end="")
    print("* "*i)
Q99. Write a python program to print below pattern.

1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5

Answer:
rows = int(input("Enter the rows which you want to print"))
for i in range(1, rows + 1):
    for j in range(1, i + 1):
        print(j, end=' ')
    print('')
Q100. Write a python program to print below pattern.

A 
B B 
C C C 
D D D D 
E E E E E 
